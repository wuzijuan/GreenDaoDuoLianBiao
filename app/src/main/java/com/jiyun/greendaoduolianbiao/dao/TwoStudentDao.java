package com.jiyun.greendaoduolianbiao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.jiyun.greendaoduolianbiao.TwoStudent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TWO_STUDENT".
*/
public class TwoStudentDao extends AbstractDao<TwoStudent, Long> {

    public static final String TABLENAME = "TWO_STUDENT";

    /**
     * Properties of entity TwoStudent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TwoStudentId = new Property(0, Long.class, "twoStudentId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property OneId = new Property(2, Long.class, "oneId", false, "ONE_ID");
    }

    private Query<TwoStudent> one_TwostudentsQuery;

    public TwoStudentDao(DaoConfig config) {
        super(config);
    }
    
    public TwoStudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TWO_STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: twoStudentId
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"ONE_ID\" INTEGER);"); // 2: oneId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TWO_STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TwoStudent entity) {
        stmt.clearBindings();
 
        Long twoStudentId = entity.getTwoStudentId();
        if (twoStudentId != null) {
            stmt.bindLong(1, twoStudentId);
        }
        stmt.bindString(2, entity.getName());
 
        Long oneId = entity.getOneId();
        if (oneId != null) {
            stmt.bindLong(3, oneId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TwoStudent entity) {
        stmt.clearBindings();
 
        Long twoStudentId = entity.getTwoStudentId();
        if (twoStudentId != null) {
            stmt.bindLong(1, twoStudentId);
        }
        stmt.bindString(2, entity.getName());
 
        Long oneId = entity.getOneId();
        if (oneId != null) {
            stmt.bindLong(3, oneId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TwoStudent readEntity(Cursor cursor, int offset) {
        TwoStudent entity = new TwoStudent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // twoStudentId
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // oneId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TwoStudent entity, int offset) {
        entity.setTwoStudentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setOneId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TwoStudent entity, long rowId) {
        entity.setTwoStudentId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TwoStudent entity) {
        if(entity != null) {
            return entity.getTwoStudentId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TwoStudent entity) {
        return entity.getTwoStudentId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "twostudents" to-many relationship of One. */
    public List<TwoStudent> _queryOne_Twostudents(Long oneId) {
        synchronized (this) {
            if (one_TwostudentsQuery == null) {
                QueryBuilder<TwoStudent> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OneId.eq(null));
                one_TwostudentsQuery = queryBuilder.build();
            }
        }
        Query<TwoStudent> query = one_TwostudentsQuery.forCurrentThread();
        query.setParameter(0, oneId);
        return query.list();
    }

}
