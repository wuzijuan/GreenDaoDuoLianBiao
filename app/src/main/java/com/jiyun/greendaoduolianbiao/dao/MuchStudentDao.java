package com.jiyun.greendaoduolianbiao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.jiyun.greendaoduolianbiao.TeacherJoinStudent;

import com.jiyun.greendaoduolianbiao.MuchStudent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUCH_STUDENT".
*/
public class MuchStudentDao extends AbstractDao<MuchStudent, Long> {

    public static final String TABLENAME = "MUCH_STUDENT";

    /**
     * Properties of entity MuchStudent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StudentId = new Property(0, Long.class, "studentId", true, "_id");
    }

    private DaoSession daoSession;

    private Query<MuchStudent> muchTeacher_MuchStudentsQuery;

    public MuchStudentDao(DaoConfig config) {
        super(config);
    }
    
    public MuchStudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUCH_STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY );"); // 0: studentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUCH_STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MuchStudent entity) {
        stmt.clearBindings();
 
        Long studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindLong(1, studentId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MuchStudent entity) {
        stmt.clearBindings();
 
        Long studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindLong(1, studentId);
        }
    }

    @Override
    protected final void attachEntity(MuchStudent entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MuchStudent readEntity(Cursor cursor, int offset) {
        MuchStudent entity = new MuchStudent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) // studentId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MuchStudent entity, int offset) {
        entity.setStudentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MuchStudent entity, long rowId) {
        entity.setStudentId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MuchStudent entity) {
        if(entity != null) {
            return entity.getStudentId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MuchStudent entity) {
        return entity.getStudentId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "muchStudents" to-many relationship of MuchTeacher. */
    public List<MuchStudent> _queryMuchTeacher_MuchStudents(Long tId) {
        synchronized (this) {
            if (muchTeacher_MuchStudentsQuery == null) {
                QueryBuilder<MuchStudent> queryBuilder = queryBuilder();
                queryBuilder.join(TeacherJoinStudent.class, TeacherJoinStudentDao.Properties.SId)
                    .where(TeacherJoinStudentDao.Properties.TId.eq(tId));
                muchTeacher_MuchStudentsQuery = queryBuilder.build();
            }
        }
        Query<MuchStudent> query = muchTeacher_MuchStudentsQuery.forCurrentThread();
        query.setParameter(0, tId);
        return query.list();
    }

}
